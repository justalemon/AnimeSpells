# AppVeyor template for FiveM and ScriptHookVDotNet modifications
# (C) 2018-2019 Hannele Ruiz
# Released under MIT

# This should be changed after every major release
version: "1.0.0.{build}"
# The AppVeyor image to use, usually the most up-to-date
image: Visual Studio 2017

# Send a Discord notification to notify the build progress
notifications:
  - provider: Webhook
    url:
      secure: RQOjbD0a6023xZNVZ7zzk7PjRpoF448yAGSM8koDLhkNxybpJEgU/L3h43PoeDWpqlPsA5YeGG8JtWJEw9MZnSzjR7OMrm7OtUoBDeA9nbrUR1BBB4yurd8rYoGb7pBAQ+Ea/IxnRBjnehqPJBBTfAKnXfdS7oZe85cbt/am28icV56TNPAbR8vXjIRHLzDm

# Assembly patching: Change the Product Version and File Version
assembly_info:
  patch: true
  file: Properties\AssemblyInfo.cs
  assembly_version: "{version}"
  assembly_file_version: "{version}"

# Some simple stuff: If this is a tag, use the tag without the v at the start as our version
init:
  - ps: if ($env:APPVEYOR_REPO_TAG -eq "true") { Update-AppveyorBuild -Version "$($env:APPVEYOR_REPO_TAG_NAME.TrimStart("v"))" }

# During the install, restore Git Submodules and NuGet Packages
install:
  - git submodule update --init --recursive
  - nuget restore %APPVEYOR_PROJECT_NAME%.sln

# On my projects, the Solution name is equal to the Project/Repo name
# So build the Solution File that is called just like the repo
build_script:
  - msbuild %APPVEYOR_PROJECT_NAME%.sln /t:Build /p:Configuration=Release

# After the build, package the output files from the release folder
# REMEMBER: Set the output location to "..\bin\Debug\" and "..\bin\Release\"
after_build:
  - 7z a %APPVEYOR_PROJECT_NAME%.7z %APPVEYOR_BUILD_FOLDER%\bin\Release\*
  - appveyor PushArtifact %APPVEYOR_PROJECT_NAME%.7z

# During tags, deploy the 7zip file(s) to GitHub Releases
deploy:
  release: v$(APPVEYOR_BUILD_VERSION)
  provider: GitHub
  auth_token:
    secure: "DkvKC8KRj8AipGu/oWW/J2e6jMWt2xXQfKU7oefFMsp0ZMfzz+OR9Y9XpML+ZmG4"
  artifact: /.*\.7z/
  draft: false
  prerelease: false
  on:
    branch: master
    appveyor_repo_tag: true
